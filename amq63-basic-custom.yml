apiVersion: v1
kind: Template
labels:
  template: amq63-basic-custom
  xpaas: 1.4.8
message: A new messaging service has been created in your project. It will handle
  the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service
  is ${MQ_USERNAME}/${MQ_PASSWORD}.
metadata:
  annotations:
    description: Application template for JBoss A-MQ brokers. These can be deployed
      as standalone or in a mesh. This template doesn't feature SSL support.
    iconClass: icon-amq
    openshift.io/display-name: Red Hat JBoss A-MQ 6.3 custom image
    openshift.io/provider-display-name: Red Hat, Inc. (SOS International custom)
    tags: messaging,amq,jboss,hidden
    version: 1.4.8
  creationTimestamp: 2018-06-22T11:42:31Z
  name: amq63-basic-custom
  resourceVersion: "1470"
  selfLink: /oapi/v1/namespaces/openshift/templates/amq63-basic
  uid: 591f9c62-7611-11e8-b070-08002766e550
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-amqp
  spec:
    ports:
    - port: 5672
      targetPort: 5672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mqtt
  spec:
    ports:
    - port: 1883
      targetPort: 1883
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's STOMP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-stomp
  spec:
    ports:
    - port: 61613
      targetPort: 61613
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's WebSocket port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-websocket
  spec:
    ports:
    - port: 61614
      targetPort: 61614
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp",
        "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name":
        "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Supports node discovery for mesh formation.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mesh
  spec:
    clusterIP: None
    ports:
    - name: mesh
      port: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD}
          - name: AMQ_TRANSPORTS
            value: ${MQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${MQ_QUEUES}
          - name: AMQ_TOPICS
            value: ${MQ_TOPICS}
          - name: MQ_SERIALIZABLE_PACKAGES
            value: ${MQ_SERIALIZABLE_PACKAGES}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-amq-mesh
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: ${AMQ_STORAGE_USAGE_LIMIT}
          - name: AMQ_QUEUE_MEMORY_LIMIT
            value: ${AMQ_QUEUE_MEMORY_LIMIT}
          image: jboss-amq-63
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        containerNames:
        - broker-amq
        from:
          kind: ImageStreamTag
          name: broker:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: broker
  spec:
    lookupPolicy:
      local: false
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: broker-s2i
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: 'broker:latest'
    source:
#      contextDir: ctx-dir
      git:
        uri: ${GIT_REPO}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: 'amq63-openshift:latest'
      type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      build: custom-xpaas-amq
      application: ${APPLICATION_NAME}
    name: amq63-openshift
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations:
          openshift.io/imported-from: registry.access.redhat.com/jboss-amq-6/amq63-openshift
        from:
          kind: DockerImage
          name: ${S2I_IMAGE}
        name: latest
        referencePolicy:
          type: Source
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: broker
- description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`,
    `amqp`, `stomp` and `mqtt`.'
  displayName: A-MQ Protocols
  name: MQ_PROTOCOL
  value: openwire
- description: Queue names, separated by commas. These queues will be automatically
    created when the broker starts. If left empty, queues will be still created dynamically.
  displayName: Queues
  name: MQ_QUEUES
- description: Topic names, separated by commas. These topics will be automatically
    created when the broker starts. If left empty, topics will be still created dynamically.
  displayName: Topics
  name: MQ_TOPICS
- description: List of packages that are allowed to be serialized for use in ObjectMessage,
    separated by commas. If your app doesn't use ObjectMessages, leave this blank.
    This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
  displayName: A-MQ Serializable Packages
  name: MQ_SERIALIZABLE_PACKAGES
- description: User name for standard broker user. It is required for connecting to
    the broker. If left empty, it will be generated.
  displayName: A-MQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MQ_USERNAME
- description: Password for standard broker user. It is required for connecting to
    the broker. If left empty, it will be generated.
  displayName: A-MQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_PASSWORD
- description: The discovery agent type to use for discovering mesh endpoints.  'dns'
    will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes
    REST API to resolve service endpoints.  If using 'kube' the service account for
    the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user
    view system:serviceaccount:<namespace>:default' where <namespace> is the project
    namespace.
  displayName: A-MQ Mesh Discovery Type
  name: AMQ_MESH_DISCOVERY_TYPE
  value: dns
- description: The A-MQ storage usage limit
  displayName: A-MQ Storage Limit
  name: AMQ_STORAGE_USAGE_LIMIT
  value: 100 gb
- description: The queue memory limit (default is 1mb)
  displayName: Queue Memory Limit
  name: AMQ_QUEUE_MEMORY_LIMIT
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: Git repo, which contains the s2i config
  displayName: S2I Git Repo
  name: GIT_REPO
  value: https://github.com/rh-demos/amq-websocket.git
- description: S2I image to use for the build
  displayName: S2I Image
  name: S2I_IMAGE
  value: registry.access.redhat.com/jboss-amq-6/amq63-openshift
